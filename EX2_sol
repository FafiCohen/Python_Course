{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1lxFdTEi3pxxVGpHZ12Xf83n7xMBllBOm",
      "authorship_tag": "ABX9TyMepaHklG0umUyZkW9z2GpV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FafiCohen/Python_Course/blob/main/EX2_sol\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "#### תרגיל 2\n",
        "אליסף כהן\n",
        "311524680\n",
        "\n"
      ],
      "metadata": {
        "id": "CltoO8rsW4fb"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "5XcgdzZ3nhFT"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "#### **סעיף 1**"
      ],
      "metadata": {
        "id": "FLxniVPxW1q7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#load data\n",
        "df=pd.read_csv('/content/can_table.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Bel4h1Jcnl7F",
        "outputId": "fd48fc90-7672-4e5b-daa8-75f6573cf1df"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0     timestamp LatAcc  LongAcc YawRate SteeringAng    BrkPed  \\\n",
              "0           0  1.650198e+09                             -2.4375             \n",
              "1           1  1.650198e+09                                      0.392157   \n",
              "2           2  1.650198e+09                                                 \n",
              "3           3  1.650198e+09  0.125  -0.3125                                 \n",
              "4           4  1.650198e+09                  -0.456                         \n",
              "\n",
              "  WheelVelR WheelVelL TrnsShft VehSpd ThrPstn  \n",
              "0                                              \n",
              "1                                              \n",
              "2     4.488     4.492                          \n",
              "3                                              \n",
              "4                                              "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17de8f59-437b-4118-9f5b-a9243c67d4f5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>LatAcc</th>\n",
              "      <th>LongAcc</th>\n",
              "      <th>YawRate</th>\n",
              "      <th>SteeringAng</th>\n",
              "      <th>BrkPed</th>\n",
              "      <th>WheelVelR</th>\n",
              "      <th>WheelVelL</th>\n",
              "      <th>TrnsShft</th>\n",
              "      <th>VehSpd</th>\n",
              "      <th>ThrPstn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-2.4375</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>0.392157</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>4.488</td>\n",
              "      <td>4.492</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.125</td>\n",
              "      <td>-0.3125</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-0.456</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17de8f59-437b-4118-9f5b-a9243c67d4f5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-17de8f59-437b-4118-9f5b-a9243c67d4f5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-17de8f59-437b-4118-9f5b-a9243c67d4f5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e8fd114b-0c14-4fed-a510-1837f9961ad7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8fd114b-0c14-4fed-a510-1837f9961ad7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e8fd114b-0c14-4fed-a510-1837f9961ad7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2=df.replace(r'^\\s*$', np.nan, regex=True)\n",
        "df2.fillna(method='bfill', inplace=True)\n",
        "df2.fillna(method='ffill', inplace=True)\n",
        "df2.head(10  )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "VrkBs969oyfy",
        "outputId": "040b616b-4251-45be-ecb2-e5156db6377c"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0     timestamp  LatAcc  LongAcc YawRate SteeringAng    BrkPed  \\\n",
              "0           0  1.650198e+09   0.125  -0.3125  -0.456     -2.4375  0.392157   \n",
              "1           1  1.650198e+09   0.125  -0.3125  -0.456     -2.4375  0.392157   \n",
              "2           2  1.650198e+09   0.125  -0.3125  -0.456     -2.4375  0.392157   \n",
              "3           3  1.650198e+09   0.125  -0.3125  -0.456     -2.4375  0.392157   \n",
              "4           4  1.650198e+09  0.1875    -0.25  -0.456     -2.4375  0.392157   \n",
              "5           5  1.650198e+09  0.1875    -0.25  -0.432     -2.4375  0.392157   \n",
              "6           6  1.650198e+09  0.1875    -0.25  -0.432     -2.4375  0.392157   \n",
              "7           7  1.650198e+09  0.1875    -0.25  -0.432     -2.4375  0.392157   \n",
              "8           8  1.650198e+09  0.1875    -0.25  -0.432     -2.4375  0.392157   \n",
              "9           9  1.650198e+09  0.1875    -0.25  -0.432     -2.4375  0.392157   \n",
              "\n",
              "  WheelVelR WheelVelL TrnsShft     VehSpd   ThrPstn  \n",
              "0     4.488     4.492      4.0  41.578125  0.392157  \n",
              "1     4.488     4.492      4.0  41.578125  0.392157  \n",
              "2     4.488     4.492      4.0  41.578125  0.392157  \n",
              "3     4.492     4.496      4.0  41.578125  0.392157  \n",
              "4     4.492     4.496      4.0  41.578125  0.392157  \n",
              "5     4.492     4.496      4.0  41.578125  0.392157  \n",
              "6     4.492     4.496      4.0  41.578125  0.392157  \n",
              "7     4.492     4.496      4.0  41.578125  0.392157  \n",
              "8     4.492     4.496      4.0  41.578125  0.392157  \n",
              "9     4.496       4.5      4.0  41.578125  0.392157  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-86a3edb5-5cc3-48bb-b8b9-83b896552da3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>LatAcc</th>\n",
              "      <th>LongAcc</th>\n",
              "      <th>YawRate</th>\n",
              "      <th>SteeringAng</th>\n",
              "      <th>BrkPed</th>\n",
              "      <th>WheelVelR</th>\n",
              "      <th>WheelVelL</th>\n",
              "      <th>TrnsShft</th>\n",
              "      <th>VehSpd</th>\n",
              "      <th>ThrPstn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.125</td>\n",
              "      <td>-0.3125</td>\n",
              "      <td>-0.456</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.488</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.125</td>\n",
              "      <td>-0.3125</td>\n",
              "      <td>-0.456</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.488</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.125</td>\n",
              "      <td>-0.3125</td>\n",
              "      <td>-0.456</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.488</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.125</td>\n",
              "      <td>-0.3125</td>\n",
              "      <td>-0.456</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.496</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.1875</td>\n",
              "      <td>-0.25</td>\n",
              "      <td>-0.456</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.496</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.1875</td>\n",
              "      <td>-0.25</td>\n",
              "      <td>-0.432</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.496</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.1875</td>\n",
              "      <td>-0.25</td>\n",
              "      <td>-0.432</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.496</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.1875</td>\n",
              "      <td>-0.25</td>\n",
              "      <td>-0.432</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.496</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.1875</td>\n",
              "      <td>-0.25</td>\n",
              "      <td>-0.432</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.492</td>\n",
              "      <td>4.496</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>1.650198e+09</td>\n",
              "      <td>0.1875</td>\n",
              "      <td>-0.25</td>\n",
              "      <td>-0.432</td>\n",
              "      <td>-2.4375</td>\n",
              "      <td>0.392157</td>\n",
              "      <td>4.496</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>41.578125</td>\n",
              "      <td>0.392157</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86a3edb5-5cc3-48bb-b8b9-83b896552da3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-86a3edb5-5cc3-48bb-b8b9-83b896552da3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-86a3edb5-5cc3-48bb-b8b9-83b896552da3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b8c8574f-f75b-459b-8daa-26b67b0cf3a0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8c8574f-f75b-459b-8daa-26b67b0cf3a0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b8c8574f-f75b-459b-8daa-26b67b0cf3a0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####  **סעיף 2**\n",
        "הערה: השתמשתי באינדקס של הטבלה כייצוג של ציר\n",
        "האיקס, לפי  סדר התצפיות"
      ],
      "metadata": {
        "id": "owugM-EkW0qH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df2=df2.apply(pd.to_numeric)\n"
      ],
      "metadata": {
        "id": "zsOx2yunNXyL"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "fig.subplots_adjust(right=0.75)\n",
        "\n",
        "twin1 = ax.twinx()\n",
        "twin2 = ax.twinx()\n",
        "\n",
        "# Offset the right spine of twin2.  The ticks and label have already been\n",
        "# placed on the right by twinx above.\n",
        "twin2.spines.right.set_position((\"axes\", 1.2))\n",
        "\n",
        "p1, = ax.plot(df2.index,df2['LatAcc'], \"orange\", label=\"LatAcc\")\n",
        "p2, = twin1.plot(df2.index,df2['SteeringAng'], \"g-\", label=\"SteeringAng\")\n",
        "p3, = twin2.plot(df2.index,df2['TrnsShft'], \"r-\", label=\"TrnsShft\")\n",
        "\n",
        "ax.set_xlim(min(df2.index)-5, max(df2.index)+5)\n",
        "ax.set_ylim(min(df2['LatAcc'])-0.1, max(df2['LatAcc'])+0.1)\n",
        "twin1.set_ylim(min(df2['SteeringAng'])-1, max(df2['SteeringAng'])+1)\n",
        "twin2.set_ylim(min(df2['TrnsShft']), max(df2['TrnsShft']))\n",
        "\n",
        "ax.set_xlabel(\"index\")\n",
        "ax.set_ylabel(\"LatAcc\")\n",
        "twin1.set_ylabel(\"SteeringAng\")\n",
        "twin2.set_ylabel(\"TrnsShft\")\n",
        "\n",
        "ax.yaxis.label.set_color(p1.get_color())\n",
        "twin1.yaxis.label.set_color(p2.get_color())\n",
        "twin2.yaxis.label.set_color(p3.get_color())\n",
        "\n",
        "tkw = dict(size=3, width=1)\n",
        "ax.tick_params(axis='y', colors=p1.get_color(), **tkw)\n",
        "twin1.tick_params(axis='y', colors=p2.get_color(), **tkw)\n",
        "twin2.tick_params(axis='y', colors=p3.get_color(), **tkw)\n",
        "ax.tick_params(axis='x', **tkw)\n",
        "\n",
        "ax.legend(handles=[p1, p2, p3],loc='upper right')\n",
        "fig.set_figwidth(15)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "cmLFjC-HWzsW",
        "outputId": "21d1f44f-a7c6-4c0e-f4c5-93689913cae5"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-25-07400e065d93>:21: UserWarning: Attempting to set identical low and high ylims makes transformation singular; automatically expanding.\n",
            "  twin2.set_ylim(min(df2['TrnsShft']), max(df2['TrnsShft']))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x480 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}